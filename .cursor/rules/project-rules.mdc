---
alwaysApply: true
---
You are an expert in React Router v7 (formerly Remix), TailwindCSS, and TypeScript, focusing on scalable web development.

**Key Principles**
- Provide clear, precise React Router and TypeScript examples.
- Apply immutability and pure functions where applicable.
- Favor route modules and nested layouts for composition and modularity.
- Use meaningful variable names (e.g., `isAuthenticated`, `userRole`).
- Always use kebab-case for file names (e.g., `user-profile.tsx`).
- Prefer named exports for loaders, actions, and components.
- Always use `pnpm`
- Always run linter when done making changes - `pnpm lint`
- You can ignore linter warnings while debugging with console logs

**React Router v7 Specific Rules**
- NEVER use @remix-run/* packages or imports
- NEVER use deprecated helpers like json() - use native Response object instead
- Resource routes must be in their own folder with a route.ts file
- Route IDs match folder structure (e.g., navbar/route.ts becomes "navbar")
- Flat routes are automatically configured based on file system
- No manual route configuration needed
- Use Response.json() or new Response() for loader/action returns
- The project uses `app/routes.ts` for route configuration
- Uses `flatRoutes()` from `@react-router/fs-routes` for automatic file-based routing
- Route configuration: `export default flatRoutes() satisfies RouteConfig`
- All routes are automatically discovered from the file system structure
- No manual route definitions needed - routes are generated from folder structure

**TypeScript & React Router**
- Define data structures with interfaces for type safety.
- Avoid the `any` type, fully utilize TypeScript's type system.
- Organize files: imports, loaders/actions, component logic.
- Use template strings for multi-line literals.
- Utilize optional chaining and nullish coalescing.
- Use nested layouts and dynamic routes where applicable.
- Leverage loaders for efficient server-side rendering and data fetching.
- Use `useFetcher` and `useLoaderData` for seamless data management between client and server.

**File Naming Conventions**
- `*.tsx` for React components
- `*.ts` for utilities, types, and configurations
- `root.tsx` for the root layout
- `route.ts` for resource routes
- All files use kebab-case.

**Code Style**
- Use single quotes for string literals.
- Indent with 2 spaces.
- Ensure clean code with no trailing whitespace.
- Use `const` for immutable variables.
- Use template strings for string interpolation.

**React Router Guidelines**
- Use `<Link>` for navigation, avoiding full page reloads.
- Implement loaders and actions for server-side data loading and mutations.
- Ensure accessibility with semantic HTML and ARIA labels.
- Leverage route-based loading, error boundaries, and catch boundaries.
- Use the `useFetcher` hook for non-blocking data updates.
- Cache and optimize resource loading where applicable to improve performance.
- All imports should use `react-router` or `react-router-dom` packages.

**Import Order**
1. React Router core modules
2. React and other core libraries
3. Third-party packages
4. Application-specific imports
5. Environment-specific imports
6. Relative path imports

**Error Handling and Validation**
- Implement error boundaries for catching unexpected errors.
- Use custom error handling within loaders and actions.
- Validate user input on both client and server using formData or JSON.

**Testing**
- Use `@testing-library/react` for component testing.
- Write tests for loaders and actions ensuring data correctness.
- Mock fetch requests and responses where applicable.

**Performance Optimization**
- Prefetch routes using `<Link prefetch="intent">` for faster navigation.
- Defer non-essential JavaScript using `<Scripts defer />`.
- Optimize nested layouts to minimize re-rendering.
- Use built-in caching and data revalidation to optimize performance.

**Security**
- Prevent XSS by sanitizing user-generated content.
- Use proper CSRF protection for form submissions.
- Handle sensitive data on the server, never expose in client code.

**Key Conventions**
- Use loaders and actions to handle server-side logic.
- Focus on reusability and modularity across routes and components.
- Follow React Router's best practices for file structure and data fetching.
- Optimize for performance and accessibility.

**Reference**
Refer to React Router's official documentation for best practices in Routes, Loaders, and Actions.

**Data Fetching Patterns**
- Use `useLoaderData` when:
  - The component is the main content of a route
  - Data is required for initial page render
  - The route's URL should represent the data state
  - SEO is important for the content
  - You want to leverage route caching
- Use `useFetcher` when:
  - The component is not tied to a route (e.g., navbar, sidebar)
  - Data should be loaded after initial render ("render-then-fetch")
  - The data fetch shouldn't affect the URL
  - You need parallel data loading
  - You want background updates without navigation
  - You're submitting data without navigation
  - The component appears in multiple routes but needs the same data

**Route Structure**
- When creating a new route, follow the established folder structure pattern:
  ```
  app/routes/route-name/
  ├── route.tsx              # Main route component
  ├── loader.ts              # Data loading logic (optional)
  ├── action.ts              # Form submissions (optional)
  ├── meta.ts                # SEO metadata (optional)
  ├── types.ts               # TypeScript interfaces (optional)
  ├── route-name.data.ts     # Static data (optional)
  ├── components/            # Route-specific components
  │   ├── component-name.component.tsx
  │   └── subfolder/
  │       └── nested.component.tsx
  └── partials/              # Page sections/partials
      ├── section-name.partial.tsx
      └── another-section.partial.tsx
  ```

- **Route File Naming:**
  - `route.tsx` - Main route component (required)
  - `loader.ts` - Server-side data loading
  - `action.ts` - Form submissions and mutations
  - `meta.ts` - SEO metadata and page titles
  - `types.ts` - TypeScript interfaces and types
  - `*.data.ts` - Static data and constants

- **Component Organization:**
  - `components/` - Route-specific components that are only used within this route
  - `partials/` - Page sections that compose the main route component
  - Use `.component.tsx` suffix for components
  - Use `.partial.tsx` suffix for page sections/partials
  - Group related components in subfolders when needed

- **Route Structure Examples:**
  - **Simple Route:** `app/routes/about/route.tsx`
  - **Complex Route:** `app/routes/articles/article-single/` with components, partials, loader, action
  - **Nested Routes:** `app/routes/events/event-single/` with full folder structure
  - **Resource Routes:** `app/routes/navbar/route.ts` (returns data, not UI)

- **Route ID Convention:**
  - Route IDs automatically match folder structure
  - `about/route.tsx` becomes route ID "about"
  - `articles/article-single/route.tsx` becomes "articles.article-single"
  - Use kebab-case for folder names to match route IDs

- **Data Loading Patterns:**
  - Use `loader.ts` for server-side data fetching
  - Use `action.ts` for form submissions and mutations
  - Export named functions: `export const loader`, `export const action`
  - Return `Response.json()` or `new Response()` from loaders/actions
  - Share loaders between routes when appropriate (e.g., about route using home loader)

- **Component Composition:**
  - Main route component should be clean and focused on composition
  - Import and compose partials for different page sections
  - Keep route-specific components in the route's `components/` folder
  - Use shared components from `app/components/` for reusable UI elements